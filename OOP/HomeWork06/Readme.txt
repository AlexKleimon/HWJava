SOLID принципы:
1) Принцип разделения интерфейса
Реализовано в классе Model, добавлен интерфейс OperationMath отвечающий за предоставления методов математических операций и интерфейс SetValue.
2) Принцип единственной ответственности
Реализован в классе Present, блок операций и валдиации сделаны отдельными классами.
3) Принцип открытости/закрытости (OCP)
Реализован в классе Operation. Добавлен интерфейс I_Operation, который отвечает за логику работы калькулятора, если нам понадобится сделать второй калькулятор, 
у которого будет другая логика, нам достаточно переопределить метод operation. 
Так же если необходимо расширить функционал калькулятора нам достаточно в переопределенном методе operation добавить новое условие case (например case: "Pow") и 
в model соответствующий метод (Pow).
4)Принцип подстановки Барбары Лисков
Ввиду малого размера решаемой задачи, классы не наследуют лишнего функционала(Была идея, сделать интерфейс с методом операция, и затем все математические операции разделить на классы,
 и затем переопределять в них метод интерфейса. Но думаю это не рационально, делать множество бесполезных классов.). 
5)Реализации классов никак не влияют на более высокие уровни абстракции. (Сопосбу который применяли на семинаре, не нашел применения в рамках этой задачи)